/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: nvcm.proto */

#ifndef PROTOBUF_C_nvcm_2eproto__INCLUDED
#define PROTOBUF_C_nvcm_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _NVCMsg NVCMsg;
typedef struct _AddRequest AddRequest;
typedef struct _AddResponse AddResponse;
typedef struct _DelRequest DelRequest;
typedef struct _DelResponse DelResponse;
typedef struct _ModifyRequest ModifyRequest;
typedef struct _ModifyResponse ModifyResponse;
typedef struct _SearchRequest SearchRequest;
typedef struct _SearchResponse SearchResponse;
typedef struct _NodeConnectInfo NodeConnectInfo;
typedef struct _Object Object;
typedef struct _Client Client;
typedef struct _Context Context;
typedef struct _Node Node;


/* --- enums --- */

typedef enum _SearchType {
  SEARCH_TYPE__OBJECT = 0,
  SEARCH_TYPE__SEQUENCE = 1,
  SEARCH_TYPE__ALL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SEARCH_TYPE)
} SearchType;

/* --- messages --- */

typedef enum {
  NVCMSG__OP__NOT_SET = 0,
  NVCMSG__OP_ADD_REQUEST = 2,
  NVCMSG__OP_ADD_RESPONSE = 3,
  NVCMSG__OP_DEL_REQUEST = 4,
  NVCMSG__OP_DEL_RESPONSE = 5,
  NVCMSG__OP_MODIFY_REQUEST = 6,
  NVCMSG__OP_MODIFY_RESPONSE = 7,
  NVCMSG__OP_SEARCH_REQUEST = 8,
  NVCMSG__OP_SEARCH_RESPONSE = 9,
  NVCMSG__OP_NODE_CONNECT_INFO = 10,
} NVCMsg__OpCase;

struct  _NVCMsg
{
  ProtobufCMessage base;
  uint32_t version;
  NVCMsg__OpCase op_case;
  union {
    AddRequest *addrequest;
    AddResponse *addresponse;
    DelRequest *delrequest;
    DelResponse *delresponse;
    ModifyRequest *modifyrequest;
    ModifyResponse *modifyresponse;
    SearchRequest *searchrequest;
    SearchResponse *searchresponse;
    NodeConnectInfo *nodeconnectinfo;
  };
};
#define NVCMSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nvcmsg__descriptor) \
    , 0, NVCMSG__OP__NOT_SET, {} }


struct  _AddRequest
{
  ProtobufCMessage base;
  Object *object;
};
#define ADD_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_request__descriptor) \
    , NULL }


struct  _AddResponse
{
  ProtobufCMessage base;
};
#define ADD_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_response__descriptor) \
     }


struct  _DelRequest
{
  ProtobufCMessage base;
  Object *object;
};
#define DEL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&del_request__descriptor) \
    , NULL }


struct  _DelResponse
{
  ProtobufCMessage base;
};
#define DEL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&del_response__descriptor) \
     }


struct  _ModifyRequest
{
  ProtobufCMessage base;
  Object *object;
};
#define MODIFY_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modify_request__descriptor) \
    , NULL }


struct  _ModifyResponse
{
  ProtobufCMessage base;
};
#define MODIFY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&modify_response__descriptor) \
     }


struct  _SearchRequest
{
  ProtobufCMessage base;
  SearchType searchtype;
  Object *object;
};
#define SEARCH_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&search_request__descriptor) \
    , 0, NULL }


struct  _SearchResponse
{
  ProtobufCMessage base;
  SearchType searchtype;
  Object *object;
};
#define SEARCH_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&search_response__descriptor) \
    , 0, NULL }


struct  _NodeConnectInfo
{
  ProtobufCMessage base;
};
#define NODE_CONNECT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&node_connect_info__descriptor) \
     }


typedef enum {
  OBJECT__OBJECT__NOT_SET = 0,
  OBJECT__OBJECT_CLIENT = 1,
  OBJECT__OBJECT_CONTEXT = 2,
  OBJECT__OBJECT_NODE = 3,
} Object__ObjectCase;

struct  _Object
{
  ProtobufCMessage base;
  Object__ObjectCase object_case;
  union {
    Client *client;
    Context *context;
    Node *node;
  };
};
#define OBJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&object__descriptor) \
    , OBJECT__OBJECT__NOT_SET, {} }


struct  _Client
{
  ProtobufCMessage base;
  char *email;
  char *pwd;
  char *apikey;
};
#define CLIENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client__descriptor) \
    , NULL, NULL, NULL }


struct  _Context
{
  ProtobufCMessage base;
  char *clientid;
  protobuf_c_boolean has_id;
  uint32_t id;
  char *description;
};
#define CONTEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&context__descriptor) \
    , NULL, 0,0, NULL }


struct  _Node
{
  ProtobufCMessage base;
  protobuf_c_boolean has_contextid;
  uint32_t contextid;
  char *description;
  char *uuid;
  char *provkey;
  char *ipaddr;
  char *status;
};
#define NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&node__descriptor) \
    , 0,0, NULL, NULL, NULL, NULL, NULL }


/* NVCMsg methods */
void   nvcmsg__init
                     (NVCMsg         *message);
size_t nvcmsg__get_packed_size
                     (const NVCMsg   *message);
size_t nvcmsg__pack
                     (const NVCMsg   *message,
                      uint8_t             *out);
size_t nvcmsg__pack_to_buffer
                     (const NVCMsg   *message,
                      ProtobufCBuffer     *buffer);
NVCMsg *
       nvcmsg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nvcmsg__free_unpacked
                     (NVCMsg *message,
                      ProtobufCAllocator *allocator);
/* AddRequest methods */
void   add_request__init
                     (AddRequest         *message);
size_t add_request__get_packed_size
                     (const AddRequest   *message);
size_t add_request__pack
                     (const AddRequest   *message,
                      uint8_t             *out);
size_t add_request__pack_to_buffer
                     (const AddRequest   *message,
                      ProtobufCBuffer     *buffer);
AddRequest *
       add_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_request__free_unpacked
                     (AddRequest *message,
                      ProtobufCAllocator *allocator);
/* AddResponse methods */
void   add_response__init
                     (AddResponse         *message);
size_t add_response__get_packed_size
                     (const AddResponse   *message);
size_t add_response__pack
                     (const AddResponse   *message,
                      uint8_t             *out);
size_t add_response__pack_to_buffer
                     (const AddResponse   *message,
                      ProtobufCBuffer     *buffer);
AddResponse *
       add_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_response__free_unpacked
                     (AddResponse *message,
                      ProtobufCAllocator *allocator);
/* DelRequest methods */
void   del_request__init
                     (DelRequest         *message);
size_t del_request__get_packed_size
                     (const DelRequest   *message);
size_t del_request__pack
                     (const DelRequest   *message,
                      uint8_t             *out);
size_t del_request__pack_to_buffer
                     (const DelRequest   *message,
                      ProtobufCBuffer     *buffer);
DelRequest *
       del_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   del_request__free_unpacked
                     (DelRequest *message,
                      ProtobufCAllocator *allocator);
/* DelResponse methods */
void   del_response__init
                     (DelResponse         *message);
size_t del_response__get_packed_size
                     (const DelResponse   *message);
size_t del_response__pack
                     (const DelResponse   *message,
                      uint8_t             *out);
size_t del_response__pack_to_buffer
                     (const DelResponse   *message,
                      ProtobufCBuffer     *buffer);
DelResponse *
       del_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   del_response__free_unpacked
                     (DelResponse *message,
                      ProtobufCAllocator *allocator);
/* ModifyRequest methods */
void   modify_request__init
                     (ModifyRequest         *message);
size_t modify_request__get_packed_size
                     (const ModifyRequest   *message);
size_t modify_request__pack
                     (const ModifyRequest   *message,
                      uint8_t             *out);
size_t modify_request__pack_to_buffer
                     (const ModifyRequest   *message,
                      ProtobufCBuffer     *buffer);
ModifyRequest *
       modify_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modify_request__free_unpacked
                     (ModifyRequest *message,
                      ProtobufCAllocator *allocator);
/* ModifyResponse methods */
void   modify_response__init
                     (ModifyResponse         *message);
size_t modify_response__get_packed_size
                     (const ModifyResponse   *message);
size_t modify_response__pack
                     (const ModifyResponse   *message,
                      uint8_t             *out);
size_t modify_response__pack_to_buffer
                     (const ModifyResponse   *message,
                      ProtobufCBuffer     *buffer);
ModifyResponse *
       modify_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   modify_response__free_unpacked
                     (ModifyResponse *message,
                      ProtobufCAllocator *allocator);
/* SearchRequest methods */
void   search_request__init
                     (SearchRequest         *message);
size_t search_request__get_packed_size
                     (const SearchRequest   *message);
size_t search_request__pack
                     (const SearchRequest   *message,
                      uint8_t             *out);
size_t search_request__pack_to_buffer
                     (const SearchRequest   *message,
                      ProtobufCBuffer     *buffer);
SearchRequest *
       search_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   search_request__free_unpacked
                     (SearchRequest *message,
                      ProtobufCAllocator *allocator);
/* SearchResponse methods */
void   search_response__init
                     (SearchResponse         *message);
size_t search_response__get_packed_size
                     (const SearchResponse   *message);
size_t search_response__pack
                     (const SearchResponse   *message,
                      uint8_t             *out);
size_t search_response__pack_to_buffer
                     (const SearchResponse   *message,
                      ProtobufCBuffer     *buffer);
SearchResponse *
       search_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   search_response__free_unpacked
                     (SearchResponse *message,
                      ProtobufCAllocator *allocator);
/* NodeConnectInfo methods */
void   node_connect_info__init
                     (NodeConnectInfo         *message);
size_t node_connect_info__get_packed_size
                     (const NodeConnectInfo   *message);
size_t node_connect_info__pack
                     (const NodeConnectInfo   *message,
                      uint8_t             *out);
size_t node_connect_info__pack_to_buffer
                     (const NodeConnectInfo   *message,
                      ProtobufCBuffer     *buffer);
NodeConnectInfo *
       node_connect_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   node_connect_info__free_unpacked
                     (NodeConnectInfo *message,
                      ProtobufCAllocator *allocator);
/* Object methods */
void   object__init
                     (Object         *message);
size_t object__get_packed_size
                     (const Object   *message);
size_t object__pack
                     (const Object   *message,
                      uint8_t             *out);
size_t object__pack_to_buffer
                     (const Object   *message,
                      ProtobufCBuffer     *buffer);
Object *
       object__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   object__free_unpacked
                     (Object *message,
                      ProtobufCAllocator *allocator);
/* Client methods */
void   client__init
                     (Client         *message);
size_t client__get_packed_size
                     (const Client   *message);
size_t client__pack
                     (const Client   *message,
                      uint8_t             *out);
size_t client__pack_to_buffer
                     (const Client   *message,
                      ProtobufCBuffer     *buffer);
Client *
       client__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client__free_unpacked
                     (Client *message,
                      ProtobufCAllocator *allocator);
/* Context methods */
void   context__init
                     (Context         *message);
size_t context__get_packed_size
                     (const Context   *message);
size_t context__pack
                     (const Context   *message,
                      uint8_t             *out);
size_t context__pack_to_buffer
                     (const Context   *message,
                      ProtobufCBuffer     *buffer);
Context *
       context__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   context__free_unpacked
                     (Context *message,
                      ProtobufCAllocator *allocator);
/* Node methods */
void   node__init
                     (Node         *message);
size_t node__get_packed_size
                     (const Node   *message);
size_t node__pack
                     (const Node   *message,
                      uint8_t             *out);
size_t node__pack_to_buffer
                     (const Node   *message,
                      ProtobufCBuffer     *buffer);
Node *
       node__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   node__free_unpacked
                     (Node *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*NVCMsg_Closure)
                 (const NVCMsg *message,
                  void *closure_data);
typedef void (*AddRequest_Closure)
                 (const AddRequest *message,
                  void *closure_data);
typedef void (*AddResponse_Closure)
                 (const AddResponse *message,
                  void *closure_data);
typedef void (*DelRequest_Closure)
                 (const DelRequest *message,
                  void *closure_data);
typedef void (*DelResponse_Closure)
                 (const DelResponse *message,
                  void *closure_data);
typedef void (*ModifyRequest_Closure)
                 (const ModifyRequest *message,
                  void *closure_data);
typedef void (*ModifyResponse_Closure)
                 (const ModifyResponse *message,
                  void *closure_data);
typedef void (*SearchRequest_Closure)
                 (const SearchRequest *message,
                  void *closure_data);
typedef void (*SearchResponse_Closure)
                 (const SearchResponse *message,
                  void *closure_data);
typedef void (*NodeConnectInfo_Closure)
                 (const NodeConnectInfo *message,
                  void *closure_data);
typedef void (*Object_Closure)
                 (const Object *message,
                  void *closure_data);
typedef void (*Client_Closure)
                 (const Client *message,
                  void *closure_data);
typedef void (*Context_Closure)
                 (const Context *message,
                  void *closure_data);
typedef void (*Node_Closure)
                 (const Node *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    search_type__descriptor;
extern const ProtobufCMessageDescriptor nvcmsg__descriptor;
extern const ProtobufCMessageDescriptor add_request__descriptor;
extern const ProtobufCMessageDescriptor add_response__descriptor;
extern const ProtobufCMessageDescriptor del_request__descriptor;
extern const ProtobufCMessageDescriptor del_response__descriptor;
extern const ProtobufCMessageDescriptor modify_request__descriptor;
extern const ProtobufCMessageDescriptor modify_response__descriptor;
extern const ProtobufCMessageDescriptor search_request__descriptor;
extern const ProtobufCMessageDescriptor search_response__descriptor;
extern const ProtobufCMessageDescriptor node_connect_info__descriptor;
extern const ProtobufCMessageDescriptor object__descriptor;
extern const ProtobufCMessageDescriptor client__descriptor;
extern const ProtobufCMessageDescriptor context__descriptor;
extern const ProtobufCMessageDescriptor node__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_nvcm_2eproto__INCLUDED */
